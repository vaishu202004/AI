import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = self.calculate_cost()

    def __lt__(self, other):
        return self.cost < other.cost

    def __eq__(self, other):
        return self.state == other.state

    def calculate_cost(self):
        cost = 0
        goal_state = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    goal_row, goal_col = divmod(self.state[i][j], 3)
                    cost += abs(i - goal_row) + abs(j - goal_col)
        return cost + self.depth

    def generate_children(self):
        children = []
        zero_row, zero_col = self.find_zero()
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        for dir in directions:
            new_row, new_col = zero_row + dir[0], zero_col + dir[1]
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_state = [row[:] for row in self.state]
                new_state[zero_row][zero_col], new_state[new_row][new_col] = new_state[new_row][new_col], 0
                children.append(PuzzleNode(new_state, parent=self, move=(zero_row, zero_col)))
        return children

    def find_zero(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

def solve_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    frontier = [initial_node]
    explored = set()

    while frontier:
        current_node = heapq.heappop(frontier)
        if current_node.state == [[0, 1, 2], [3, 4, 5], [6, 7, 8]]:
            return current_node
        explored.add(tuple(map(tuple, current_node.state)))
        children = current_node.generate_children()
        for child in children:
            if tuple(map(tuple, child.state)) not in explored:
                heapq.heappush(frontier, child)
    return None

def print_solution(solution_node):
    path = []
    current_node = solution_node
    while current_node:
        path.append(current_node.state)
        current_node = current_node.parent
    path.reverse()
    for i in range(len(path)):
        print("Step", i)
        for row in path[i]:
            print(row)
        print()

if __name__ == "__main__":
    initial_state = [[1, 2, 3], [0, 4, 5], [6, 7, 8]]
    solution_node = solve_puzzle(initial_state)
    if solution_node:
        print("Solution found!")
        print_solution(solution_node)
    else:
        print("No solution exists.")
